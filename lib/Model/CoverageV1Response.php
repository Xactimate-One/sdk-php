<?php
/**
 * CoverageV1Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Xactimate One API
 *
 * The Xactimate One API allows you to integrate your current services and applications directly with Xactimate One. It creates a seamless experience for your company as it manages claims with your internal software by sending and receiving data from the Xactimate One platform.
 *
 * OpenAPI spec version: null
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CoverageV1Response Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CoverageV1Response implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CoverageV1Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'apply_depreciation' => 'bool',
'deductible' => '\Swagger\Client\Model\DeductibleV1Response',
'depreciation_is_recoverable' => 'bool',
'id' => 'string',
'name' => 'string',
'per_item_limit' => 'double',
'per_occurrence_limit' => 'double',
'reserve' => 'double',
'type' => '\Swagger\Client\Model\CoverageType'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'apply_depreciation' => null,
'deductible' => null,
'depreciation_is_recoverable' => null,
'id' => 'uuid',
'name' => null,
'per_item_limit' => 'double',
'per_occurrence_limit' => 'double',
'reserve' => 'double',
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apply_depreciation' => 'applyDepreciation',
'deductible' => 'deductible',
'depreciation_is_recoverable' => 'depreciationIsRecoverable',
'id' => 'id',
'name' => 'name',
'per_item_limit' => 'perItemLimit',
'per_occurrence_limit' => 'perOccurrenceLimit',
'reserve' => 'reserve',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apply_depreciation' => 'setApplyDepreciation',
'deductible' => 'setDeductible',
'depreciation_is_recoverable' => 'setDepreciationIsRecoverable',
'id' => 'setId',
'name' => 'setName',
'per_item_limit' => 'setPerItemLimit',
'per_occurrence_limit' => 'setPerOccurrenceLimit',
'reserve' => 'setReserve',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apply_depreciation' => 'getApplyDepreciation',
'deductible' => 'getDeductible',
'depreciation_is_recoverable' => 'getDepreciationIsRecoverable',
'id' => 'getId',
'name' => 'getName',
'per_item_limit' => 'getPerItemLimit',
'per_occurrence_limit' => 'getPerOccurrenceLimit',
'reserve' => 'getReserve',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apply_depreciation'] = isset($data['apply_depreciation']) ? $data['apply_depreciation'] : null;
        $this->container['deductible'] = isset($data['deductible']) ? $data['deductible'] : null;
        $this->container['depreciation_is_recoverable'] = isset($data['depreciation_is_recoverable']) ? $data['depreciation_is_recoverable'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['per_item_limit'] = isset($data['per_item_limit']) ? $data['per_item_limit'] : null;
        $this->container['per_occurrence_limit'] = isset($data['per_occurrence_limit']) ? $data['per_occurrence_limit'] : null;
        $this->container['reserve'] = isset($data['reserve']) ? $data['reserve'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['apply_depreciation'] === null) {
            $invalidProperties[] = "'apply_depreciation' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apply_depreciation
     *
     * @return bool
     */
    public function getApplyDepreciation()
    {
        return $this->container['apply_depreciation'];
    }

    /**
     * Sets apply_depreciation
     *
     * @param bool $apply_depreciation apply_depreciation
     *
     * @return $this
     */
    public function setApplyDepreciation($apply_depreciation)
    {
        $this->container['apply_depreciation'] = $apply_depreciation;

        return $this;
    }

    /**
     * Gets deductible
     *
     * @return \Swagger\Client\Model\DeductibleV1Response
     */
    public function getDeductible()
    {
        return $this->container['deductible'];
    }

    /**
     * Sets deductible
     *
     * @param \Swagger\Client\Model\DeductibleV1Response $deductible deductible
     *
     * @return $this
     */
    public function setDeductible($deductible)
    {
        $this->container['deductible'] = $deductible;

        return $this;
    }

    /**
     * Gets depreciation_is_recoverable
     *
     * @return bool
     */
    public function getDepreciationIsRecoverable()
    {
        return $this->container['depreciation_is_recoverable'];
    }

    /**
     * Sets depreciation_is_recoverable
     *
     * @param bool $depreciation_is_recoverable depreciation_is_recoverable
     *
     * @return $this
     */
    public function setDepreciationIsRecoverable($depreciation_is_recoverable)
    {
        $this->container['depreciation_is_recoverable'] = $depreciation_is_recoverable;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets per_item_limit
     *
     * @return double
     */
    public function getPerItemLimit()
    {
        return $this->container['per_item_limit'];
    }

    /**
     * Sets per_item_limit
     *
     * @param double $per_item_limit per_item_limit
     *
     * @return $this
     */
    public function setPerItemLimit($per_item_limit)
    {
        $this->container['per_item_limit'] = $per_item_limit;

        return $this;
    }

    /**
     * Gets per_occurrence_limit
     *
     * @return double
     */
    public function getPerOccurrenceLimit()
    {
        return $this->container['per_occurrence_limit'];
    }

    /**
     * Sets per_occurrence_limit
     *
     * @param double $per_occurrence_limit per_occurrence_limit
     *
     * @return $this
     */
    public function setPerOccurrenceLimit($per_occurrence_limit)
    {
        $this->container['per_occurrence_limit'] = $per_occurrence_limit;

        return $this;
    }

    /**
     * Gets reserve
     *
     * @return double
     */
    public function getReserve()
    {
        return $this->container['reserve'];
    }

    /**
     * Sets reserve
     *
     * @param double $reserve reserve
     *
     * @return $this
     */
    public function setReserve($reserve)
    {
        $this->container['reserve'] = $reserve;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\CoverageType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\CoverageType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
