<?php
/**
 * PropertyClaimPersonnel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Xactimate One API
 *
 * # Introduction  The Xactimate One API allows you to integrate your current services and applications directly with Xactimate One. It creates a seamless experience for your company as it manages claims with your internal software by sending and receiving data from the Xactimate One platform.  This API uses a modern <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a> architectural style that follows <a href=\"https://en.wikipedia.org/wiki/HATEOAS\" target=\"_blank\">HATEOAS</a> principles. It also includes the following features:  - Uses predictable resource-oriented URLs - Accepts JSON-encoded request bodies - Returns JSON-encoded responses - Uses standard HTTP response codes, authentication, and methods/verbs
 *
 * OpenAPI spec version: 0.1.224
 * Contact: contact@xactware.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertyClaimPersonnel Class Doc Comment
 *
 * @category Class
 * @description People and entities related to the claim
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertyClaimPersonnel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PropertyClaimPersonnel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agency' => '\Swagger\Client\Model\Contact',
        'broker_agent' => '\Swagger\Client\Model\Contact',
        'claim_handler' => '\Swagger\Client\Model\Contact',
        'insurer' => '\Swagger\Client\Model\Contact',
        'loss_adjuster' => '\Swagger\Client\Model\Contact',
        'property_contact' => '\Swagger\Client\Model\Contact',
        'reference' => '\Swagger\Client\Model\Contact'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agency' => null,
        'broker_agent' => null,
        'claim_handler' => null,
        'insurer' => null,
        'loss_adjuster' => null,
        'property_contact' => null,
        'reference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agency' => 'agency',
        'broker_agent' => 'brokerAgent',
        'claim_handler' => 'claimHandler',
        'insurer' => 'insurer',
        'loss_adjuster' => 'lossAdjuster',
        'property_contact' => 'propertyContact',
        'reference' => 'reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agency' => 'setAgency',
        'broker_agent' => 'setBrokerAgent',
        'claim_handler' => 'setClaimHandler',
        'insurer' => 'setInsurer',
        'loss_adjuster' => 'setLossAdjuster',
        'property_contact' => 'setPropertyContact',
        'reference' => 'setReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agency' => 'getAgency',
        'broker_agent' => 'getBrokerAgent',
        'claim_handler' => 'getClaimHandler',
        'insurer' => 'getInsurer',
        'loss_adjuster' => 'getLossAdjuster',
        'property_contact' => 'getPropertyContact',
        'reference' => 'getReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agency'] = isset($data['agency']) ? $data['agency'] : null;
        $this->container['broker_agent'] = isset($data['broker_agent']) ? $data['broker_agent'] : null;
        $this->container['claim_handler'] = isset($data['claim_handler']) ? $data['claim_handler'] : null;
        $this->container['insurer'] = isset($data['insurer']) ? $data['insurer'] : null;
        $this->container['loss_adjuster'] = isset($data['loss_adjuster']) ? $data['loss_adjuster'] : null;
        $this->container['property_contact'] = isset($data['property_contact']) ? $data['property_contact'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agency
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getAgency()
    {
        return $this->container['agency'];
    }

    /**
     * Sets agency
     *
     * @param \Swagger\Client\Model\Contact $agency agency
     *
     * @return $this
     */
    public function setAgency($agency)
    {
        $this->container['agency'] = $agency;

        return $this;
    }

    /**
     * Gets broker_agent
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getBrokerAgent()
    {
        return $this->container['broker_agent'];
    }

    /**
     * Sets broker_agent
     *
     * @param \Swagger\Client\Model\Contact $broker_agent broker_agent
     *
     * @return $this
     */
    public function setBrokerAgent($broker_agent)
    {
        $this->container['broker_agent'] = $broker_agent;

        return $this;
    }

    /**
     * Gets claim_handler
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getClaimHandler()
    {
        return $this->container['claim_handler'];
    }

    /**
     * Sets claim_handler
     *
     * @param \Swagger\Client\Model\Contact $claim_handler claim_handler
     *
     * @return $this
     */
    public function setClaimHandler($claim_handler)
    {
        $this->container['claim_handler'] = $claim_handler;

        return $this;
    }

    /**
     * Gets insurer
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getInsurer()
    {
        return $this->container['insurer'];
    }

    /**
     * Sets insurer
     *
     * @param \Swagger\Client\Model\Contact $insurer insurer
     *
     * @return $this
     */
    public function setInsurer($insurer)
    {
        $this->container['insurer'] = $insurer;

        return $this;
    }

    /**
     * Gets loss_adjuster
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getLossAdjuster()
    {
        return $this->container['loss_adjuster'];
    }

    /**
     * Sets loss_adjuster
     *
     * @param \Swagger\Client\Model\Contact $loss_adjuster loss_adjuster
     *
     * @return $this
     */
    public function setLossAdjuster($loss_adjuster)
    {
        $this->container['loss_adjuster'] = $loss_adjuster;

        return $this;
    }

    /**
     * Gets property_contact
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getPropertyContact()
    {
        return $this->container['property_contact'];
    }

    /**
     * Sets property_contact
     *
     * @param \Swagger\Client\Model\Contact $property_contact property_contact
     *
     * @return $this
     */
    public function setPropertyContact($property_contact)
    {
        $this->container['property_contact'] = $property_contact;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param \Swagger\Client\Model\Contact $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


