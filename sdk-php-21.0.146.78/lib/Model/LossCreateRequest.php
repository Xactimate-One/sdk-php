<?php
/**
 * LossCreateRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Xactimate One API
 *
 * The Xactimate One API allows you to integrate your current services and applications directly with Xactimate One. It creates a seamless experience for your company as it manages claims with your internal software by sending and receiving data from the Xactimate One platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LossCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LossCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LossCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_notice_of_loss' => '\DateTime',
        'loss_date' => '\DateTime',
        'loss_description' => 'string',
        'peril' => '\OpenAPI\Client\Model\PerilCreateRequest',
        'potential_subrogation' => '\OpenAPI\Client\Model\PotentialSubrogationCreateRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_notice_of_loss' => 'date-time',
        'loss_date' => 'date-time',
        'loss_description' => null,
        'peril' => null,
        'potential_subrogation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_notice_of_loss' => 'firstNoticeOfLoss',
        'loss_date' => 'lossDate',
        'loss_description' => 'lossDescription',
        'peril' => 'peril',
        'potential_subrogation' => 'potentialSubrogation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_notice_of_loss' => 'setFirstNoticeOfLoss',
        'loss_date' => 'setLossDate',
        'loss_description' => 'setLossDescription',
        'peril' => 'setPeril',
        'potential_subrogation' => 'setPotentialSubrogation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_notice_of_loss' => 'getFirstNoticeOfLoss',
        'loss_date' => 'getLossDate',
        'loss_description' => 'getLossDescription',
        'peril' => 'getPeril',
        'potential_subrogation' => 'getPotentialSubrogation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_notice_of_loss'] = $data['first_notice_of_loss'] ?? null;
        $this->container['loss_date'] = $data['loss_date'] ?? null;
        $this->container['loss_description'] = $data['loss_description'] ?? null;
        $this->container['peril'] = $data['peril'] ?? null;
        $this->container['potential_subrogation'] = $data['potential_subrogation'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['loss_date'] === null) {
            $invalidProperties[] = "'loss_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_notice_of_loss
     *
     * @return \DateTime|null
     */
    public function getFirstNoticeOfLoss()
    {
        return $this->container['first_notice_of_loss'];
    }

    /**
     * Sets first_notice_of_loss
     *
     * @param \DateTime|null $first_notice_of_loss The first notification of loss date
     *
     * @return self
     */
    public function setFirstNoticeOfLoss($first_notice_of_loss)
    {
        $this->container['first_notice_of_loss'] = $first_notice_of_loss;

        return $this;
    }

    /**
     * Gets loss_date
     *
     * @return \DateTime
     */
    public function getLossDate()
    {
        return $this->container['loss_date'];
    }

    /**
     * Sets loss_date
     *
     * @param \DateTime $loss_date The loss date
     *
     * @return self
     */
    public function setLossDate($loss_date)
    {
        $this->container['loss_date'] = $loss_date;

        return $this;
    }

    /**
     * Gets loss_description
     *
     * @return string|null
     */
    public function getLossDescription()
    {
        return $this->container['loss_description'];
    }

    /**
     * Sets loss_description
     *
     * @param string|null $loss_description The loss description
     *
     * @return self
     */
    public function setLossDescription($loss_description)
    {
        $this->container['loss_description'] = $loss_description;

        return $this;
    }

    /**
     * Gets peril
     *
     * @return \OpenAPI\Client\Model\PerilCreateRequest|null
     */
    public function getPeril()
    {
        return $this->container['peril'];
    }

    /**
     * Sets peril
     *
     * @param \OpenAPI\Client\Model\PerilCreateRequest|null $peril peril
     *
     * @return self
     */
    public function setPeril($peril)
    {
        $this->container['peril'] = $peril;

        return $this;
    }

    /**
     * Gets potential_subrogation
     *
     * @return \OpenAPI\Client\Model\PotentialSubrogationCreateRequest|null
     */
    public function getPotentialSubrogation()
    {
        return $this->container['potential_subrogation'];
    }

    /**
     * Sets potential_subrogation
     *
     * @param \OpenAPI\Client\Model\PotentialSubrogationCreateRequest|null $potential_subrogation potential_subrogation
     *
     * @return self
     */
    public function setPotentialSubrogation($potential_subrogation)
    {
        $this->container['potential_subrogation'] = $potential_subrogation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


